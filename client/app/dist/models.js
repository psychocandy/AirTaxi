// Generated by CoffeeScript 1.3.3
(function() {
  var _base, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if ((_ref = window.AirTaxi) == null) {
    window.AirTaxi = {};
  }

  if ((_ref1 = (_base = window.AirTaxi).Models) == null) {
    _base.Models = {};
  }

  window.AirTaxi.Models.User = (function(_super) {

    __extends(User, _super);

    function User() {
      return User.__super__.constructor.apply(this, arguments);
    }

    User.prototype.defaults = {
      name: "",
      rating: 1,
      icon: ""
    };

    User.prototype.idAttribute = "_id";

    return User;

  })(Backbone.RelationalModel);

  window.AirTaxi.Models.Ride = (function(_super) {

    __extends(Ride, _super);

    function Ride() {
      return Ride.__super__.constructor.apply(this, arguments);
    }

    Ride.prototype.defaults = {
      from: {
        lat: 0.0,
        long: 0.0
      },
      to: {
        lat: 0.0,
        long: 0.0
      }
    };

    Ride.prototype.idAttribute = "_id";

    Ride.prototype.relations = [
      {
        type: Backbone.HasMany,
        key: 'users',
        relatedModel: 'window.AirTaxi.Models.User',
        reverseRelations: {
          key: 'ride'
        }
      }
    ];

    return Ride;

  })(Backbone.RelationalModel);

  window.AirTaxi.Models.RideCollection = (function(_super) {

    __extends(RideCollection, _super);

    function RideCollection() {
      return RideCollection.__super__.constructor.apply(this, arguments);
    }

    RideCollection.prototype.model = window.AirTaxi.Models.Ride;

    return RideCollection;

  })(Backbone.Collection);

  window.AirTaxi.Models.ForsquareVenue = (function(_super) {

    __extends(ForsquareVenue, _super);

    function ForsquareVenue() {
      return ForsquareVenue.__super__.constructor.apply(this, arguments);
    }

    ForsquareVenue.prototype.defaults = {
      yosy: true,
      id: null,
      name: "",
      location: {
        address: "",
        lat: 0.0,
        long: 0.0,
        distance: 0.0,
        country: "",
        city: "",
        cc: ""
      }
    };

    return ForsquareVenue;

  })(Backbone.Model);

  window.AirTaxi.Models.ForsquareVenues = (function(_super) {

    __extends(ForsquareVenues, _super);

    function ForsquareVenues() {
      return ForsquareVenues.__super__.constructor.apply(this, arguments);
    }

    ForsquareVenues.prototype.model = window.AirTaxi.Models.ForsquareVenue;

    ForsquareVenues.prototype.initialize = function(params) {
      return this.params = params;
    };

    ForsquareVenues.prototype.set = function(params) {
      return this.params = params;
    };

    ForsquareVenues.prototype.parse = function(response) {
      return response.response.venues;
    };

    ForsquareVenues.prototype.url = function() {
      var client_id, client_secret, ll;
      ll = "" + this.params.lat + "," + this.params.long;
      client_id = "CJHLE0A4T3CWDMZ3UZ1XRAIDRDZTBCQBRETN4MMCI012PRTR";
      client_secret = "ERA1YLUZ2GGCHYPNCOEJCFF1DNBRY4SKEXDZNWP2OREWVYDM";
      return "https://api.foursquare.com/v2/venues/search?ll=" + ll + "&llAcc=" + this.params.accuracy + "&intent=browse&radius=1000&client_id=" + client_id + "&client_secret=" + client_secret + "&v=20120902";
    };

    return ForsquareVenues;

  })(Backbone.Collection);

  window.AirTaxi.Models.UserLocation = (function(_super) {

    __extends(UserLocation, _super);

    function UserLocation() {
      return UserLocation.__super__.constructor.apply(this, arguments);
    }

    UserLocation.prototype.defaults = {
      lat: 0.0,
      long: 0.0,
      accuracy: 0,
      address: ""
    };

    UserLocation.prototype.fetch_location = function(cb) {
      var _this = this;
      return navigator.geolocation.getCurrentPosition(function(position) {
        _this.set("lat", position.coords.latitude);
        _this.set("long", position.coords.longitude);
        _this.set("accuracy", position.coords.accuracy);
        return _this.fetch().success(function() {
          if (cb instanceof Function) {
            return cb(_this);
          }
        });
      });
    };

    UserLocation.prototype.parse = function(response) {
      if (response.status !== "OK") {
        return;
      }
      return {
        address: response.results[0].formatted_address
      };
    };

    UserLocation.prototype.url = function() {
      var latlang;
      latlang = this.get("lat") + "," + this.get("long");
      return "http://maps.googleapis.com/maps/api/geocode/json?latlng=" + latlang + "&sensor=true";
    };

    return UserLocation;

  })(Backbone.Model);

}).call(this);
