// Generated by CoffeeScript 1.3.3
(function() {

  describe("User Location", function() {
    var _this = this;
    beforeEach(function() {
      return _this.user_location = new window.AirTaxi.Models.UserLocation;
    });
    it("should be able to notify when the user location is detected", function() {
      var callback;
      callback = jasmine.createSpy();
      _this.user_location.fetch_location(callback);
      waits(1000);
      return runs(function() {
        return expect(callback).toHaveBeenCalled();
      });
    });
    it("should be able to return the associated model as callback", function() {
      var callback;
      callback = jasmine.createSpy();
      _this.user_location.fetch_location(callback);
      waits(1000);
      return runs(function() {
        return expect(callback).toHaveBeenCalledWith(_this.user_location);
      });
    });
    it("should be able to get the current user coordinates and store it", function() {
      _this.user_location.fetch_location();
      waits(1000);
      return runs(function() {
        expect(_this.user_location.get("lat")).toBeGreaterThan(0);
        return expect(_this.user_location.get("long")).toBeGreaterThan(0);
      });
    });
    it("should be able to get the current user address and store it", function() {
      _this.user_location.fetch_location();
      waits(1000);
      return runs(function() {
        return expect(_this.user_location.get("address").length).toBeGreaterThan(0);
      });
    });
    it("should be able to handle undefined user coordinates", function() {
      _this.user_location.fetch();
      waits(1000);
      return runs(function() {
        return expect(_this.user_location.get("address").length).toBeGreaterThan(0);
      });
    });
    return it("should be able to handle ZERO_REULTS from google", function() {
      _this.user_location.set({
        lat: -1
      });
      _this.user_location.fetch();
      waits(1000);
      return runs(function() {
        return expect(_this.user_location.get("address").length).toBe(0);
      });
    });
  });

}).call(this);
